#ifndef _BASE64_HTML_H
#define _BASE64_HTML_H
static const char *html_code_base64 = "<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <title>分布式检索系统</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <style>
        body.IE_M7, body.IE_M8, body.Win6{font-family:"Segoe UI", Tahoma, Verdana, Arial;}
        body.Safari{min-width:987px;}
        body.SF_iPhone{-webkit-text-size-adjust:none;}
        body
        {
            margin:0;font-family:Tahoma, Verdana, Arial;
            background-color:#FEFEFE;
            color:#333;
            font-size:12pt;
            width:100%;
            height:100%;
        }
        form{margin:0px;display: inline}
        #mainframe{position:relative;background-color:#FEFEFE;width:100%;height:100%;}
        #task{position:absolute;background-color:#F4FBFF;display:inline;
            border:1px solid #81BEF7;padding:0px;left:0px;top:0px;width:100%;height:100%;}
        .tasklist{position:relative;padding:0px; background-color:#D0E9F7;height:100%;}
        .tasktitle{position:relative;background-color:#2F5FA1;color:#c0c0c0; height:30px;}
        #taskselect{position:relative;background-color:#D0E9F7;color:#2F5FA1;width:100%;}
        #tasklists .tasklists{position:relative;background-color:#F4FBFF;color:#2F5FA1;}
        #records{position:relative;background-color:#FEFEFE;width:100%;height:700px;}
        .task-title{background-color:#2F5FA1;color:#c0c0c0;height:30px;width:100%;}
        .ultab{list-style:none;padding:0;margin:0;width:100%;}
        .ltabname{cursor:pointer;font-size:12pt;}
        .ltab{background-color:#D0E9F7;cursor: pointer;width:100%;}
        .ltab-selected{background-color:#F4FBFF;cursor: pointer;width:100%;}
        .lfname{cursor: pointer;}
        .ltask{background-color:#F4FBFF;cursor: pointer;}
        .ltask-selected{background-color:#D0E9F7;cursor: pointer;}
        #nodeform{position:absolute;width:560px;background-color:#ffffff;
            border:1px solid #81BEF7;padding:10px;z-index:99;overflow:auto;display:none;}
        #taskform{position:absolute;width:500px;height:50px;background-color:#ffffff;
            border:1px solid #81BEF7;padding-top:10px;padding-left:6px;font-size:12pt;
            color:#2F5FA1;z-index:99;overflow:auto;display:none;}
        .eadd{color:#5FB404;font-size:13pt;font-weight:bolder;cursor:pointer;}
        .eupdate{color:#FF8000;font-size:13pt;font-weight:bolder;cursor:pointer;}
        .edelete{color:#B4045F;font-size:13pt;font-weight:bolder;cursor:pointer;}
        .eview{color:#0000ff;font-size:13pt;font-weight:bolder;cursor:pointer;}
        .closetxt{cursor:pointer;font-size:10pt;color:#cccccc;text-align:right;}
        .ntask{display:inline;color:red;font-size:12pt;}
        </style>
        <script language='javascript'>
            var chradd = '✚', chrfold = '►', chrtree = '▼', chredit='✎', chrdel='✘', chrview = '☜ ';
            var oTimer = null, QTimer = null;
            var idisplay = "display=0$,1$,2$,3,4,5,6,7,8,9";
            var base64EncodeChars = 
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            var base64DecodeChars = new Array(
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,
            -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
            15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,
            -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
            41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);
            function base64encode(str) 
            {
                var out, i, len;
                var c1, c2, c3;

                len = str.length;
                i = 0;
                out = "";
                while(i < len) {
                    c1 = str.charCodeAt(i++) & 0xff;
                    if(i == len)
                    {
                        out += base64EncodeChars.charAt(c1 >> 2);
                        out += base64EncodeChars.charAt((c1 & 0x3) << 4);
                        out += "==";
                        break;
                    }
                    c2 = str.charCodeAt(i++);
                    if(i == len)
                    {
                        out += base64EncodeChars.charAt(c1 >> 2);
                        out += base64EncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4));
                        out += base64EncodeChars.charAt((c2 & 0xF) << 2);
                        out += "=";
                        break;
                    }
                    c3 = str.charCodeAt(i++);
                    out += base64EncodeChars.charAt(c1 >> 2);
                    out += base64EncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4));
                    out += base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >>6));
                    out += base64EncodeChars.charAt(c3 & 0x3F);
                }
                return out;
            }
            function base64decode(str)
            {
                var c1, c2, c3, c4;
                var i, len, out;

                len = str.length;
                i = 0;
                out = "";
                while(i < len) {
                    /* c1 */
                    do {
                        c1 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
                    } while(i < len && c1 == -1);
                    if(c1 == -1)
                    break;

                    /* c2 */
                    do {
                        c2 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
                    } while(i < len && c2 == -1);
                    if(c2 == -1)
                    break;

                    out += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));

                    /* c3 */
                    do {
                        c3 = str.charCodeAt(i++) & 0xff;
                        if(c3 == 61)
                        return out;
                        c3 = base64DecodeChars[c3];
                    } while(i < len && c3 == -1);
                    if(c3 == -1)
                    break;

                    out += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));

                    /* c4 */
                    do {
                        c4 = str.charCodeAt(i++) & 0xff;
                        if(c4 == 61)
                        return out;
                        c4 = base64DecodeChars[c4];
                    } while(i < len && c4 == -1);
                    if(c4 == -1)
                    break;
                    out += String.fromCharCode(((c3 & 0x03) << 6) | c4);
                }
                return out;
            }
            function utf16to8(str)
            {
                var out, i, len, c;
                out = "";
                len = str.length;
                for(i = 0; i < len; i++) {
                    c = str.charCodeAt(i);
                    if ((c >= 0x0001) && (c <= 0x007F)) {
                        out += str.charAt(i);
                        } else if (c > 0x07FF) {
                        out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));
                        out += String.fromCharCode(0x80 | ((c >>  6) & 0x3F));
                        out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));
                        } else {
                        out += String.fromCharCode(0xC0 | ((c >>  6) & 0x1F));
                        out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));
                    }
                }
                return out;
            }
            function utf8to16(str)
            {
                var out, i, len, c;
                var char2, char3;
                out = "";
                len = str.length;
                i = 0;
                while(i < len) {
                    c = str.charCodeAt(i++);
                    switch(c >> 4)
                    { 
                        case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
                        // 0xxxxxxx
                        out += str.charAt(i-1);
                        break;
                        case 12: case 13:
                        // 110x xxxx   10xx xxxx
                        char2 = str.charCodeAt(i++);
                        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
                        break;
                        case 14:
                        // 1110 xxxx  10xx xxxx  10xx xxxx
                        char2 = str.charCodeAt(i++);
                        char3 = str.charCodeAt(i++);
                        out += String.fromCharCode(((c & 0x0F) << 12) |
                        ((char2 & 0x3F) << 6) |
                        ((char3 & 0x3F) << 0));
                        break;
                    }
                }

                return out;
            }
            function start_wait()
            {
                document.body.style.cursor = 'wait';
            }
            function over_wait()
            {
                document.body.style.cursor = 'auto';
            }
            function base64strdecode(str)
            {
                return utf8to16(base64decode(str));
            }
            function trim(str)
            {
                return str.replace(/(^\s+|\s+$)/, "");
            }
            function removeElement(_element)
            {
                var _parentElement = _element.parentNode;
                if(_parentElement)
                {
                    _parentElement.removeChild(_element);  
                }
                return hideBFrame();
            }
            function onDiv(div, cssName)
            {
                div.className = cssName;
            }
            function outDiv(div, cssName)
            {
                div.className = cssName;
            }
            function CreateXMLHTTP()
            {
                var xmlhttp = null;
                xmlhttpObj = ["MSXML2.XmlHttp.5.0","MSXML2.XmlHttp.4.0",
                "MSXML2.XmlHttp.3.0","MSXML2.XmlHttp","Microsoft.XmlHttp"];
                if(window.XMLHttpRequest)
                {
                    xmlhttp = new XMLHttpRequest();
                }
                else if(window.ActiveXObject)
                {
                    for(i=0;i<xmlhttpObj.length;i++)    
                    {
                        try{xmlhttp = new ActiveXObject(xmlhttpObj[i]);break;}
                        catch(e){xmlhttp = null;}
                    }
                }
                else 
                {
                    alert('Can not create XMLHTTP Object');
                }
                return xmlhttp;
            }
            //hide result
            function hideresult()
            {
                obj = document.getElementById('resinfo');
                obj.innerHTML = "";
                obj = document.getElementById('records');
                obj.innerHTML = "";
                obj = document.getElementById('page');
                obj.innerHTML = "";
                obj = document.getElementById('pagetop');
                obj.innerHTML = "";
            }
            function isoDateTime(time)
            {
                var datetime = new Date(time * 1000);
                var year = datetime.getFullYear();
                var mon = datetime.getMonth()+1;if(parseInt(mon) < 10) mon = "0"+mon;
                var day = datetime.getDate();if(parseInt(day) < 10) day = "0"+day;
                var hour = datetime.getHours();if(parseInt(hour) < 10) hour = "0"+hour;
                var min = datetime.getMinutes();if(parseInt(min) < 10) min = "0"+min;
                var sec = datetime.getSeconds();if(parseInt(sec) < 10) sec = "0"+sec;
                return year+"-"+mon+"-"+day+" "+hour+":"+min+":"+sec;
            }
            //xdisplay
            function xdisplay(text, page, isdebug)
            {
                var catlist = ["娱乐","乐活","搞笑", "动画","游戏","音乐","体育","科技",
                "电影","财富","教育","汽车","女性","热点","电视剧","原创", "综艺","风尚",
                "健康","美容","","","","屏蔽","480P",
                "360P", "256P", "视频", "音频", "其他", "720P", "加密", "原画质"];
                var html = "";
                var res = null;
                var catgroups = null;
                var opage = document.getElementById('page');
                var opagetop = document.getElementById('pagetop');
                var orecords = document.getElementById('records');
                var oresinfo = document.getElementById('resinfo');
                var records = null;
                var datetime = null;
                var i = 0, from = 0, to = 0, page_count = 0, catid = 0;
                var comments = "";

                if(text && text.length > 0 && (res = eval(text)))
                {
                    if(window.location.href.indexOf('displayres=1') >= 0)alert(text);
                    if(isdebug)
                    {
                        html = "<textarea cols=100 rows=60 >"+text+"</textarea>";
                        oresinfo.innerHTML = html;
                    }
                    else
                    {
                        //alert(res['count']);
                        html = "";
                        html += "结果:<span class='highlight'>"+res['count']+"</span>"; 
                        html += "&nbsp;&nbsp;";
                        html += "命中:<span class='highlight'>"+res['total']+"</span>"; 
                        html += "&nbsp;&nbsp;";
                        html += "IO时间:<span class='highlight'>"+res['io']+"</span>"; 
                        html += "&nbsp;&nbsp;";
                        html += "排序时间:<span class='highlight'>"+res['sort']+"</span>"; 
                        html += "&nbsp;&nbsp;";
                        html += "总文档数:<span class='highlight'>"+res['doctotal']+"</span>"; 
                        html += "&nbsp;&nbsp;";
                        if((catgroups = res['catgroups']))
                        {
                            for(x in catgroups)
                            {
                                html += catlist[x]+"[<font color=red >"+catgroups[x]+"</font>]";
                                html += "&nbsp;&nbsp;";
                            }
                        }
                        html += "&nbsp;&nbsp;<hr><br>";
                        oresinfo.innerHTML = html;
                        /* show records */
                        if(res['count'] > 0 && (records = res['records']))
                        {
                            html = "<div style='border:1px;border-color:#000000;'>";
                            html += "<table align=left >";
                            var reply_num = 0, view_num = 0;
                            var title = "", content = "", author = "", url = "";
                            for (x in records)
                            {
                                title = records[x]['summary']['0'] ;
                                content = records[x]['summary']['1'] ;
                                author = records[x]['summary']['2'] ;
                                view_num = records[x]['summary']['3'] ;
                                reply_num = records[x]['summary']['4'] ;
                                datetime = isoDateTime(records[x]['summary']['5']);
                                url = records[x]['summary']['6'] ;
                                author_url = records[x]['summary']['7'] ;
                                forum_name = records[x]['summary']['8'] ;
                                forum_url = records[x]['summary']['9'] ;
                                html += "<tr ><td width=100% >";
                                html += "<a href='"+url+"' target='_blank'>"+title+"</a>&nbsp;";
                                html += "发帖[<a href='"+author_url+"' target='_blank'>"+author+"</a>]";
                                html += "&nbsp;";
                                html += "回复["+reply_num+"/"+view_num+"]";
                                html += "&nbsp;";
                                html += "["+datetime+"]";
                                html += "<hr>";
                                html += content;
                                html += "<br><br>";
                                html += "</td></tr>";
                            }
                            html += "</table></div>";
                            orecords.innerHTML = html;
                        }
                        /* paging */
                        if((total = 1 * res['total']) > 15)
                        {
                            page_count = parseInt(total/15);
                            if(total%15) page_count++;
                                from = page - 10;
                            to = page + 10;
                            if(from < 1) from = 1;
                            if(to > page_count) to = page_count;
                            html = "";
                            if(page > 15)
                            {
                                html += "<a href='javascript:so(1)'>1</a>  ...  ";
                            }
                            for(i = from; i <= to; i++)
                            {
                                if(i == page)
                                    html += i;
                                else
                                    html += "<a href='javascript:so("+i+")'>"+i+"</a>";
                                html += "&nbsp;&nbsp;";
                            }
                            if(page < (page_count - 15))
                            {
                                html += " ...   <a href='javascript:so("+page_count+")'>"+page_count+"</a>";
                            }
                            opagetop.innerHTML = html+"<hr><br>";
                            opage.innerHTML = "<br>"+html;
                        }
                    }
                }
                else alert("没有找到相关的结果");
            }
            function sodo(argv, page_num)
            {
                var xmlHttp = null;
                var form = document.forms['search'];
                var isdebug = 0;
                if(argv != "" && (xmlHttp = CreateXMLHTTP()) != null)
                {
                    xmlHttp.open('GET', window.location.pathname+"/s?"+argv, true);
                    //xmlHttp.setRequestHeader("Content-Length", argv.length);
                    //xmlHttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    xmlHttp.onreadystatechange=function()
                    {
                        if(xmlHttp.readyState==4)
                        {
                            if(xmlHttp.status == 200)
                            {
                                if(form['debug'].checked == true) isdebug = 1;
                                xdisplay(xmlHttp.responseText, page_num, isdebug);
                            }
                            else if(xmlHttp.status == 203) alert("检索错误或者超时!");
                            else if(xmlHttp.status == 204) alert("没有找到相关的结果");
                            else alert(xmlHttp.getAllResponseHeaders());
                        }
                    }
                    xmlHttp.send();
                }else alert("请输入关键词");
            }
            //so
            function so(page)
            {
                var query = "";
                var page_num = page;
                var form = document.forms['search'];
                var fieldsfilter = 0;
                var n = 0;
                var from = 0;
                var count = 15;
                var rangefilter = "";
                var catfilter = "";
                var multicat = "";
                var catgroup = "";
                var catblock = "";
                var xup = "";
                var xdown = "";
                var orderby = 0;
                var order = 0;
                var datetime = null;
                var datefrom = 0;
                var dateto = 0;
                if(form && (query = form['query'].value) != "")
                {
                    if(page <= 0) page_num = 1;
                    from = (page_num - 1) * 15;
                    hideresult();
                    var uri = "";
                    var not_str = "";
                    var i = 0;
                    uri += idisplay;
                    uri += "&hitscale=";
                    for(i = 1; i <= 32; i++)
                    {
                        form['h'+i].value;
                        if(i < 32)uri += form['h'+i].value+",";
                        else uri += form['h'+i].value;
                    }
                    var slevel_str = "";
                    for(i = 0; i < 256; i++)
                    {
                        if(form['s'+i] && form['s'+i].checked == true)
                        {
                            slevel_str += form['s'+i].value+",";
                        }
                    }
                    if(slevel_str.length > 0) 
                        uri += "&slevel="+slevel_str.substring(0, slevel_str.length-1);
                    if((order = form['order'].value) != 0)
                        uri += "&order="+order;
                    if(form['qweight'].checked == true)
                        uri += "&qweight=1";
                    if(form['phrase'].checked == true)
                        uri += "&phrase=1";
                    if(form['rank'].checked == true)
                        uri += "&rank=1";
                    if(form['rel'].checked) uri += "&rel=1";
                    if(form['qfunc'][0].checked) uri += "&qfunc=1";
                    else if(form['qfunc'][1].checked) uri += "&qfunc=2";
                    var qfhits = 0;
                    if(form['t0'] && form['t0'].checked) qfhits = 1;
                    if(form['t1'] && form['t1'].checked) qfhits |= 1 << 1;
                    if(form['t2'] && form['t2'].checked) qfhits |= 1 << 2;
                    uri += "&qfhits="+qfhits;
                    if(form['booland'].checked == true)  uri += "&booland=1";
                    uri += "&bhits="+form['bhits'].value;
                    uri += "&bfhits="+form['bfhits'].value;
                    uri += "&bphrase="+form['bphrase'].value;
                    uri += "&bnterm="+form['bnterm'].value;
                    uri += "&bxcatup="+form['bxcatup'].value;
                    uri += "&bxcatdown="+form['bxcatdown'].value;
                    uri += "&brank="+form['brank'].value;
                    uri += "&query="+encodeURI(query);
                    if((not_str = form['not_str'].value))
                        uri += "&not="+encodeURI(not_str);
                    if((fieldsfilter = form['fieldsfilter'].value) > 0)
                        uri += "&fieldsfilter="+fieldsfilter;
                    if(form['catlist'] && (n = form['catlist'].value) >= 0)
                        multicat += n + ",";
                    if(form['block'] && form['block'].checked == true)
                        multicat += form['block'].value + ",";
                    /*
                    if(form['times'] && (n = form['times'].value) >= 0)
                        multicat += n + ",";
                    if(form['h264'] && (n = form['h264'].value) >= 0)
                        multicat += n + ",";
                    */
                    if(form['orderby'] && (orderby = form['orderby'].value) > 0)
                        uri += "&orderby="+orderby;
                    for(i = 0; i < 64; i++)
                    {
                        if(form['g'+i] && form['g'+i].checked == true) 
                            catgroup += i + ",";
                        if(form['b'+i] && form['b'+i].checked == true) 
                            catblock += i + ",";
                        if(form['f'+i] && form['f'+i].checked == true) 
                            catfilter += i + ",";
                        if(form['x'+i])
                        {
                            if(form['x'+i][0].checked == true)
                                xup += i + ",";
                            else if(form['x'+i][1].checked == true)
                                xdown += i + ",";
                        }
                    }
                    if(form['datefrom'] && form['dateto'])
                    {
                        if((form['datefrom'].value) || (form['dateto'].value))
                        {
                            var dstr = "";
                            var dlist = new Array();
                            if((dstr = form['datefrom'].value) && (dlist = dstr.split("-")))
                            {
                                datetime = new Date(dlist[0], dlist[1]-1, dlist[2]); 
                                datefrom =  datetime.getTime()/1000;
                            }
                            if((dstr = form['dateto'].value) && (dlist = dstr.split("-")))
                            {
                                datetime = new Date(dlist[0], dlist[1]-1, dlist[2]); 
                                dateto =  datetime.getTime()/1000;
                            }
                            if(dateto && dateto < datefrom) 
                            {
                                alert("时间范围不规范,终止时间必须大于起始时间");
                                return ;
                            }
                            rangefilter += "4:["+datefrom+","+dateto+"],";
                        }
                    }
                    /*
                    var userid = 0;
                    var itemid = 0;
                    if(form['userid'] && (userid = form['userid'].value) > 0)
                    {
                        rangefilter += "10:["+userid+","+userid+"],";
                    }
                    if(form['itemid'] && (itemid = form['itemid'].value) > 0)
                    {
                        rangefilter += "9:["+itemid+","+itemid+"],";
                    }
                    */
                    if(rangefilter) 
                        uri += "&rangefilter="+rangefilter.substring(0, rangefilter.length-1);
                    if(catfilter) uri += "&catfilter="+catfilter.substring(0, catfilter.length-1);
                    if(multicat) uri += "&multicat="+multicat.substring(0, multicat.length-1);
                    if(catgroup) uri += "&catgroup="+catgroup.substring(0, catgroup.length-1);
                    if(catblock) uri += "&catblock="+catblock.substring(0, catblock.length-1);
                    if(xup) uri += "&xup="+xup.substring(0, xup.length-1);
                    if(xdown) uri += "&xdown="+xdown.substring(0, xdown.length-1);
                    uri += "&from="+from+"&count=15";
                    if(form['debug'] && form['debug'].checked == true) uri += "&debug=1"
                    if(form['lifetime'] && form['lifetime'].value > 0) 
                        uri += "&lifetime="+form['lifetime'].value;
                    uri += "&rand="+Math.random();
                    if(window.location.href.indexOf('displayuri=1') >= 0)alert(uri);
                    document.forms['sodo_search']['argv'].value = uri;
                    sodo(uri, page_num);
                }else 
                    alert("请输入关键词");
            }
            //close form
            function CloseThis(element)
            {
                element.parentNode.parentNode.style.display = "none";
            }
            //hidden NodeForm
            function HideNodeform()
            {
                var div = document.getElementById('nodeform');
                if(div)div.style.display = 'none';
                var nodelist = document.getElementById('nodelists');
                if(nodelist) nodelist.innerHTML = "";
                return true;
            }
            function NodeXAdd(e)
            {
                e = e || window.event;
                var element = e.target || e.srcElement;
                var x = e.clientX + document.body.scrollLeft;
                var y = e.clientY + document.body.scrollTop;
                var Xdiv =  document.getElementById("nodeform");
                Xdiv.style.left = x;
                Xdiv.style.top = y + 10;
                Xdiv.style.display = 'inline';
                //overBFrame(Xdiv);
                var form = document.forms["nodeform"];
                form['op'].value = 1;
                form['limit'].value = 256;
                form['ip'].focus();
                form['ip'].value = '';
            }
            //list nodes 
            function ListNodes(txt)
            {
                var nodelist = document.getElementById('nodelists');
                var nodes = null;
                var res = null;
                var html = "", css = "";
                if(txt && (res = eval(txt)) && nodelist)
                {
                    nodelist.innerHTML = "";
                    if((nodes = res['nodes']) && res['count'] > 0)
                    {
                        var html = "<ul class='ultab'>";
                        for(x in nodes)
                        {
                            var limit = nodes[x]['limit'];
                            var ip = nodes[x]['ip'];
                            var port = nodes[x]['port'];
                            var nodetype = nodes[x]['type'];
                            html += "<li class='ltab' onmousemove=\"onDiv(this, 'ltab-selected')\"";
                            html += " onmouseout=\"outDiv(this, 'ltab')\" >";
                            html += "<form style='' action='javascript:void(0)' ";
                            html += " onsubmit='return NodeEdit(this);'>"
                            if(nodetype == 1) html += "Parser[";
                            else if(nodetype == 2) html += "Doc[";
                            else  html += "Index[";
                            html += ip+":"+port;
                            html += "]&nbsp;";
                            html += "<input type=hidden name='nodeid' value='"+x+"'>";
                            html += "<input type=hidden name='op' value='4'>";
                            html += "<input type=text name='limit' size=6 value='"+limit+"'>";
                            html += "&nbsp;&nbsp;";
                            html += "<span class='edelete' title='Delete' ";
                            html += " onclick=\"NodeDel("+x+")\">"+chrdel+"</span>";
                            html += "</form></li>";
                        }
                        html += "</ul>";
                        nodelist.innerHTML = html;
                    }
                    //alert(txt);
                }
            }
            //qstate 
            function QState(txt)
            {
                var qstate = document.getElementById('qstate');
                var qrecent = document.getElementById('qrecent');
                var d = 0, h = 0, m = 0, s = 0, x = 0;
                var arr = null;
                var html = "";
                if(txt && (arr = eval(txt)))
                {
                    qstate.innerHTML = "";
                    var html = "<ul class='ultab'>";
                    d = parseInt(arr['time']/86400);
                    x = arr['time'] % 86400; h = parseInt(x / 3600);
                    x %= 3600; m = parseInt(x / 60);
                    s = x % 60;
                    html += "<li>运行时间:"+d+"天"+h+"小时"+m+"分"+s+"秒</li>";
                    html += "<li>查询次数:"+arr['querys']+"</li>";
                    html += "<li>平均次数:"+arr['querys_avg']+"</li>";
                    html += "<li>缓存命中:"+arr['cache_hits']+"</li>";
                    html += "<li>命中比例:"+arr['hits_scale']+"</li>";
                    html += "</ul>";
                    qstate.innerHTML = html;
                    qrecent.innerHTML = "";
                    html = "<ul class='ultab'>";
                    html += "<li>统计时长:"+arr['last_time']+"(S)</li>";
                    html += "<li>查询次数:"+arr['last_querys']+"</li>";
                    html += "<li>平均查询:"+arr['last_avg']+"</li>";
                    html += "<li>缓存命中:"+arr['last_hits']+"</li>";
                    html += "<li>命中比例:"+arr['last_hits_scale']+"</li>";
                    html += "</ul>";
                    qrecent.innerHTML = html;
                }
            }
            //state
            function qxstate()
            {
                var xmlHttp = null;
                if((xmlHttp = CreateXMLHTTP()) != null)
                {
                    var uri = window.location.pathname+"/qstate?rand="+Math.random();
                    xmlHttp.open('GET', uri, true);
                    xmlHttp.onreadystatechange=function()
                    {
                        if(xmlHttp.readyState==4)
                        {
                            if(xmlHttp.status == 200)
                            {
                                QState(xmlHttp.responseText);
                            }
                        }
                    }
                    xmlHttp.send();
                }
            }
            //list 
            function list()
            {
                var xmlHttp = null;
                if((xmlHttp = CreateXMLHTTP()) != null)
                {
                    HideNodeform();
                    var argv = "op=8&rand="+Math.random();
                    xmlHttp.open('POST', window.location.pathname, true);
                    xmlHttp.setRequestHeader("Content-Length", argv.length);
                    xmlHttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    xmlHttp.onreadystatechange=function()
                    {
                        if(xmlHttp.readyState==4)
                        {
                            if(xmlHttp.status == 200)
                            {
                                ListNodes(xmlHttp.responseText);
                            }
                        }
                    }
                    xmlHttp.send(argv);
                }
            }
            //change port
            function changePort(form)
            {
                var i = 0;
                var portlist = ["0", "3515", "3824", "", "3721"];
                var o = form
                if(form && (o = form['type']) && (i = o.options[o.selectedIndex].value) > 0)
                {
                    form['port'].value = portlist[i];
                }
            }
            //add
            function NodeEdit(form)
            {
                var xmlHttp = null;
                var ip = "";
                var nodetype = -1;
                var nodeid = -1;
                var port = -1;
                var limit = -1;
                var argv = "";
                if(form && (op = form['op'].value) > 0)
                {
                    if(op == 1 && (nodetype = form['type'].value) > 0
                        && (limit = form['limit'].value) > 0
                        && (ip = form['ip'].value) != "" 
                        && (port = form['port'].value) > 0)
                    {
                        argv = "op=1&ip="+ip+"&port="+port+"&type="
                            +nodetype+"&limit="+limit;
                    }
                    else if(op == 4 && (nodeid = form['nodeid'].value) >= 0 
                        && (limit = form['limit'].value) > 0)
                    {
                        argv = "op=4&nodeid="+nodeid+"&limit="+limit;
                    }
                }else alert("请输入正确的数据");
                if(argv && (xmlHttp = CreateXMLHTTP()) != null)
                {
                    HideNodeform();
                    //alert(argv);
                    xmlHttp.open('POST', window.location.pathname, true);
                    xmlHttp.setRequestHeader("Content-Length", argv.length);
                    xmlHttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    xmlHttp.onreadystatechange=function()
                    {
                        if(xmlHttp.readyState==4)
                        {
                            if(xmlHttp.status == 200)
                            {
                                ListNodes(xmlHttp.responseText);
                            }
                        }
                    }
                    xmlHttp.send(argv);
                }
            }
            //del node
            function NodeDel(nodeid)
            {
                var argv = "op=2&nodeid="+nodeid;
                if(argv && confirm("确认删除该节点?") && (xmlHttp = CreateXMLHTTP()) != null)
                {
                    HideNodeform();
                    //alert(argv);
                    xmlHttp.open('POST', window.location.pathname, true);
                    xmlHttp.setRequestHeader("Content-Length", argv.length);
                    xmlHttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    xmlHttp.onreadystatechange=function()
                    {
                        if(xmlHttp.readyState==4)
                        {
                            if(xmlHttp.status == 200)
                            {
                                ListNodes(xmlHttp.responseText);
                            }
                        }
                    }
                    xmlHttp.send(argv);
                }
            }
            function clear_cache(obj)
            {
                    var xmlhttp = null;
                    var uri = "op=16";
                    if(confirm("确认清除缓存?") && (xmlHttp = CreateXMLHTTP()) != null)
                    {
                        obj.disabled = true;
                        xmlHttp.open('POST', "/", true);
                        xmlHttp.setRequestHeader("Content-Length", uri.length);
                        xmlHttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                        xmlHttp.onreadystatechange=function()
                        {
                            if(xmlHttp.readyState==4)
                            {
                                if(xmlHttp.status == 200)
                                    alert("缓存清理完成!");
                                else 
                                    alert("清理缓存失败!");
                                obj.disabled = false;
                            }
                        }
                        xmlHttp.send(uri);
                    }
            }
            function operations(obj)
            {
                var xmlhttp = null;
                var uri = "";
                if(obj.value == '暂停')
                {
                    obj.value = '恢复';
                    uri = "op=32";
                }
                else if(obj.value == '恢复')
                {
                    uri = "op=64";
                    obj.value = '暂停';
                }
                if((xmlHttp = CreateXMLHTTP()) != null)
                {
                    obj.disabled = true;
                    xmlHttp.open('POST', "/", true);
                    xmlHttp.setRequestHeader("Content-Length", uri.length);
                    xmlHttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    xmlHttp.onreadystatechange=function()
                    {
                        if(xmlHttp.readyState==4)
                        {
                            if(xmlHttp.status == 200)
                            {
                                alert("操作成功!");
                                obj.disabled = false;
                            }
                        }
                    }
                    xmlHttp.send(uri);
                }
                else alert("请求失败!");
            }
            //tstate 
            function QTState(txt)
            {
                var qtstate = document.getElementById('qtstate');
                var d = 0, h = 0, m = 0, s = 0, x = 0;
                var arr = null;
                var html = "";
                if(txt && (arr = eval(txt)))
                {
                    qtstate.innerHTML = "";
                    var html = "<ul class='ultab'>";
                    d = parseInt(arr['time']/86400);
                    x = arr['time'] % 86400; h = parseInt(x / 3600);
                    x %= 3600; m = parseInt(x / 60);
                    s = x % 60;
                    html += "<li>运行时间:"+d+"天"+h+"小时"+m+"分"+s+"秒</li>";
                    html += "<li>完成查询:"+arr['querys']+"(q)</li>";
                    html += "<li>平均查询:"+arr['avg']+"(q/s)</li>";
                    html += "<li>耗时总合:"+arr['usec_used']+"(us)</li>";
                    html += "<li>耗时平均:"+arr['usec_avg']+"(us/q)</li>";
                    html += "<li>最近查询:"+arr['last_querys']+"(q)</li>";
                    html += "<li>查询耗时:"+arr['last_usec']+"(us)</li>";
                    html += "<li>平均耗时:"+arr['last_usec_avg']+"(us/q)</li>";
                    html += "<li>统计时长:"+arr['last_time']+"(s)</li>";
                    html += "</ul>";
                    qtstate.innerHTML = html;
                }
            }
            //state
            function tstate()
            {
                var xmlHttp = null;
                if((xmlHttp = CreateXMLHTTP()) != null)
                {
                    var uri = window.location.pathname+"/tstate?rand="+Math.random();
                    xmlHttp.open('GET', uri, true);
                    xmlHttp.onreadystatechange=function()
                    {
                        if(xmlHttp.readyState==4)
                        {
                            if(xmlHttp.status == 200)
                            {
                                QTState(xmlHttp.responseText);
                            }
                        }
                    }
                    xmlHttp.send();
                }
            }
            /* load qstate */
            function loadQState()
            {
                qxstate();
                oTimer = window.setInterval('qxstate();', 10000);
                tstate();
                QTimer = window.setInterval('tstate();', 60000);
            }
            list();
        </script>
    </head>
    <!-- <body onload='javascript:loadInit();'> -->
    <body align=center onload="loadQState()">
    <div id='mainframe'>
    <div id='task'>
        <div id=task-header ></div>
            <table width=100% height=100% cellspacing=0 border=0 valign=top align=left >
                <tr>
                    <td class='tasklist' valign=top width=300 height=100% >
                        <table cellspacing=0 border=0 valign=top align=left width=100% >
                        <tr>
                            <td valign=top class='tasktitle' width=100%>
                                总体缓存统计
                                &nbsp;&nbsp;&nbsp;&nbsp;
                                <input type=button name='clearcache' onclick="clear_cache(this)" value='清除缓存'>
                            </td>
                        </tr>
                        <tr>
                            <td valign=top width=100% height=100 >
                                <div id='qstate'></div>
                            </td>
                        </tr>
                        <tr>
                            <td valign=top class='tasktitle' width=100%>
                            最近缓存统计
                            </td>
                        </tr>
                        <tr>
                            <td valign=top width=100% height=100 >
                                <div id='qrecent'></div>
                            </td>
                        </tr>
                        <tr>
                            <td valign=top class='tasktitle' width=100%>
                            性能统计[<a href='javascript:tstate();' class='tasktitle'>刷新</a>]
                            </td>
                        </tr>
                        <tr>
                            <td valign=top width=100% height=100 >
                                <div id='qtstate'></div>
                            </td>
                        </tr>
                        <tr>
                                <td valign=top class='tasktitle' width=100% >
                                点击<span class='eadd' title='Add' onclick='NodeXAdd(event)'> ✚ </span>添加(解析/检索/摘要)节点</div>
                            </td>
                        </tr>
                        <tr>
                            <td valign=top width=100% >
                                <div id='nodelists'></div>
                            </td>
                        </tr>
                    </table>
                </td>
                <td height=100% >
                <table valign=top height=100% width=100%>
                    <tr>
                    <td height=100 valign=top class='tasktitle'>
                    <form name=sodo_search action='javascript:void(0)' onsubmit="return sodo(this.argv.value, 1);">
                     检索参数:<input name='argv' size=128 type=text>
                    <input name='so_do' type=submit value='检索'>
                    </form>
                    <form name=search action='javascript:void(0)' onsubmit="return so(1);">
                    <!--
                    &nbsp;
                    <input type=button name='ops' onclick="operations(this)" value='暂停'>
                    !-->
                <hr/>
                <table width=100% class='tasktitle'><tr><td width=80 >命中控制:</td><td>
                1:<input type=text name=h1 value='0' size=1>
                2:<input type=text name=h2 value='50' size=1>
                3:<input type=text name=h3 value='50' size=1>
                4:<input type=text name=h4 value='50' size=1>
                5:<input type=text name=h5 value='50' size=1>
                6:<input type=text name=h6 value='50' size=1>
                7:<input type=text name=h7 value='50' size=1>
                8:<input type=text name=h8 value='50' size=1>
                9:<input type=text name=h9 value='60' size=1>
                10:<input type=text name=h10 value='60' size=1>
                11:<input type=text name=h11 value='60' size=1>
                12:<input type=text name=h12 value='60' size=1>
                </td></tr><tr><td></td><td>
                13:<input type=text name=h13 value='60' size=1>
                14:<input type=text name=h14 value='60' size=1>
                15:<input type=text name=h15 value='60' size=1>
                16:<input type=text name=h16 value='60' size=1>
                17:<input type=text name=h17 value='70' size=1>
                18:<input type=text name=h18 value='70' size=1>
                19:<input type=text name=h19 value='70' size=1>
                20:<input type=text name=h20 value='70' size=1>
                21:<input type=text name=h21 value='70' size=1>
                22:<input type=text name=h22 value='70' size=1>
                23:<input type=text name=h23 value='70' size=1>
                </td></tr><tr><td></td><td>
                24:<input type=text name=h24 value='70' size=1>
                25:<input type=text name=h25 value='80' size=1>
                26:<input type=text name=h26 value='80' size=1>
                27:<input type=text name=h27 value='80' size=1>
                28:<input type=text name=h28 value='80' size=1>
                29:<input type=text name=h29 value='80' size=1>
                30:<input type=text name=h30 value='80' size=1>
                31:<input type=text name=h31 value='80' size=1>
                32:<input type=text name=h32 value='80' size=1>
                </td></tr></table>
                <hr>
                打分基数:
                命中基数:<input type=text value=1 size=1 name="bhits" >&nbsp;
                字段命中:<input type=text value=2 size=1 name="bfhits" >&nbsp;
                句子命中:<input type=text value=5 size=1 name="bphrase" >&nbsp;
                句子词长:<input type=text value=1 size=1 name="bnterm" >&nbsp;
                分类加权:<input type=text value=20 size=1 name="bxcatup" >&nbsp;
                分类降权:<input type=text value=200 size=1 name="bxcatdown" >&nbsp;
                rank基数:<input type=text value=1000000000 size=10 name="brank" >&nbsp;
                <hr>

                排序方法:
                &nbsp;<input type=radio name='qfunc' value='1' checked=true>binary
                &nbsp;<input type=radio name='qfunc' value='2'>xtree
                &nbsp;<input type=checkbox name='booland' >完全匹配
                &nbsp;<input type=checkbox name='debug'>debug模式
                &nbsp;<input type=checkbox name='block' value=23 >屏蔽违禁词
                &nbsp;<input type=checkbox name='qweight' value=0 >无效词降权
                &nbsp;<input type=checkbox name='phrase' checked>句子检索
                &nbsp;<input type=checkbox name='rank' checked>Rank
                &nbsp;<input type=checkbox name='rel' checked>计算相关性
                <hr>
                <select name='catlist'>
                    <option value='-1' selected>选择分类</option>
                </select>
                &nbsp;&nbsp;
                <select name='fieldsfilter'>
                    <option value='-1' selected>选择字段</option>
                    <option value='1'>标题</option>
                    <option value='2'>内容</option>
                    <option value='4'>作者</option>
                </select>
                &nbsp;&nbsp;
                <select name='orderby'>
                    <option value='-1' selected>排序字段</option>
                    <option value='3'>浏览次数</option>
                    <option value='4'>回复次数</option>
                    <option value='5'>发帖时间</option>
                </select>
                &nbsp;&nbsp;
                <select name='order'>
                    <option value='-1' selected>降序</option>
                    <option value='1'>升序</option>
                </select>
                &nbsp;&nbsp;
                命中加权:<input type=checkbox name='t0' checked>标题
                <input type=checkbox name='t1'>内容
                <input type=checkbox name='t2'>作者
                &nbsp;&nbsp;
                <hr>
                缓存时长:<input type=text value=1 size=4 name="lifetime" >(秒)&nbsp;&nbsp;
                发帖时间:从<input type=text name='datefrom' size=8 >&nbsp;
                到&nbsp;<input type=text name='dateto' size=8 >(格式:2010-05-10) &nbsp;
                <hr>
                想查找:<input type=text name='query' size=48 >
                &nbsp;&nbsp;
                不包含:<input type=text name='not_str' size=16 >
                &nbsp;&nbsp;
                <input name=submit type=submit value='找'><br>
                <hr>
            </form>
        </td>
    </tr>
                    <tr>
                        <td height=200 ><div id='resinfo' ></div></td>
                    </tr>
                    <tr>
                    <td height=40 ><div id='pagetop' ></div></td>
                    </tr>
                    <tr>
                    <td><div id='records' ></div></td>
                    </tr>
                    <tr>
                        <td height=40><div id='page' ></div></td>
                    </tr>
                </table>
                <hr>
                </td>
            </tr>
        </table>
    </div>
    </div>
    <div id='nodeform'>
        <form name='nodeform' action='javascript:void(0);' onsubmit='return NodeEdit(this);'>
            <span class='closetxt' onclick="CloseThis(this)" >关闭</span>
            <input type=hidden name='op' value=1 >
            <input type=hidden name='nodeid' value=-1 >
            <select name='type' onchange="changePort(this.form);">
                <option value='-1' selected>选择类别</option>
                <option value='1' >查询解析</option>
                <option value='2' >摘要节点</option>
                <option value='4' >索引节点</option>
            </select> 
            &nbsp;&nbsp;
            IP:<input type=text size=20 name='ip' >:<input type=text size=8 name='port' >
            &nbsp;&nbsp;
            连接数:<input type=text size=8 name='limit'>
            &nbsp;&nbsp;
            <input type=submit value='Add'>
    </form>
    </div>
</body>
</html>
";
#endif
